{"version":3,"sources":["ImageGrid.js","GameInput.js","App.js","serviceWorker.js","index.js"],"names":["ImageGrid","props","state","gameActive","isLoading","images","prevProps","this","console","log","setState","getImages","setTimeout","Spinner","animation","role","className","map","url","index","key","src","alt","React","Component","GameInput","handleGuessChange","bind","submitGuess","handleSurrender","isGuessCorrect","correctGuess","guess","answer","guessAgain","success","event","target","value","endGame","surrender","toLowerCase","gameState","Form","Group","Row","Control","as","type","placeholder","onChange","Button","variant","onClick","Col","startGame","App","correct","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b506511c.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageGrid.css';\nimport Spinner from 'react-bootstrap/Spinner';\n\nclass ImageGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            gameActive: false,\n            isLoading: false,\n            images: []\n        }\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     if (nextProps.gameActive !== this.state.gameActive) {\n    //         this.setState({gameActive: nextProps.gameActive});\n    //         console.log('image game active changed');\n    //         if (this.state.gameActive) {\n    //             this.getImages();\n    //         }\n    //     }\n    // }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.gameActive !== this.props.gameActive) {\n            console.log('image active changed', this.props.gameActive);\n            this.setState({gameActive: this.props.gameActive});\n            if (this.props.gameActive) {\n                this.getImages();\n            } else {\n                this.setState({\n                    images: []\n                })\n            }\n        }\n    }\n    \n    getImages() {\n        console.log('getImages');\n        this.setState({isLoading: true});\n\n        setTimeout(() => {\n            this.setState({\n                images: [\n                  'https://i.redd.it/q39n7oc0yd051.jpg',\n                  'https://i.redd.it/1ywl9y2jfs511.jpg',\n                  'https://i.redd.it/sahgcxo1eiez.jpg'\n                ],\n                isLoading: false\n              })\n        }, 1000)\n\n    }\n\n    render() {\n        if (!this.state.isLoading) {\n            return  (\n                <div>\n                    <div className=\"Image-Gallery\">\n        \n                        {this.state.images.map((url, index) => {\n                            return <img className=\"Grid-image\" key={index} src={url} alt='' />\n                        })}\n                    </div>\n        \n\n                </div>  \n            )\n        }\n\n        return (\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        )\n    }\n}\n\nexport default ImageGrid;","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst GAME_STATES=[\n    'NEW_GAME',\n    'GAME_STARTED',\n    'SUCCESS',\n    'SURRENDER',\n]\nclass GameInput extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleGuessChange = this.handleGuessChange.bind(this);\n\n        this.submitGuess = this.submitGuess.bind(this);\n        this.handleSurrender = this.handleSurrender.bind(this);\n        this.isGuessCorrect = this.isGuessCorrect.bind(this);\n    \n        this.correctGuess = this.correctGuess.bind(this);\n\n        this.state = {\n            guess: '',\n            answer: 'corgi',\n            guessAgain: false,\n            success: false\n        };\n\n    }\n\n    handleGuessChange(event) {\n        this.setState({guess: event.target.value});\n    };\n\n    submitGuess() {\n        console.log('submitGuess', this.state.guess);\n        if (this.isGuessCorrect()) {\n            this.correctGuess();\n        } else {\n            this.setState({guessAgain: true});\n        }\n    };\n\n    handleSurrender() {\n        console.log('surrender');\n        this.props.endGame(false);\n        this.setState({surrender: true});\n\n    };\n\n    isGuessCorrect() {\n        return this.state.guess.toLowerCase() === this.state.answer.toLowerCase();\n    };\n\n    correctGuess() {\n        console.log('correct guess');\n        this.setState({\n            success: true,\n            guessAgain: false\n        });\n        // this.props.endGame(true);\n    };\n\n    render() {\n        if (this.props.gameState.gameActive) {\n            return (\n                <div>\n    \n                    <Form>\n                    <Form.Group>\n                        <Form.Row>\n                        <Form.Control as=\"input\" type=\"text\" placeholder=\"What subreddit is this from?\"\n                            value={this.state.guess} onChange={this.handleGuessChange} />\n    \n                        <Button variant=\"primary\" onClick={this.submitGuess}>Guess!</Button>{' '}\n\n                        {this.state.guessAgain && \n                            <Col>\n                                <span>Incorrect, try again!</span>\n                            </Col>\n                        }\n\n                        {this.state.success\n                            ?\n                            <Col>\n                                <span>Correct!</span><br/>\n                                <Button variant=\"primary\" onClick={this.props.startGame}>Play again?</Button>\n                            </Col>\n                            :\n                            <Col>\n                                <Button variant=\"danger\" onClick={this.handleSurrender}>I give up!</Button>{' '}\n                            </Col>\n                        }\n\n                        </Form.Row>\n                    </Form.Group>\n                    </Form>\n\n                    <span></span>\n    \n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <Button variant=\"outline-primary\" onClick={this.props.startGame}>Start Game!</Button>\n                </div>\n            )\n        }\n    }\n}\n\nexport default GameInput;","import React from 'react';\nimport './App.css';\nimport ImageGrid from './ImageGrid';\nimport GameInput from './GameInput';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      guess: '',\n      answer: '',\n      success: true,\n      gameActive: false,\n    }\n  }\n\n  startGame = () => {\n    console.log('startgame');\n    this.setState({\n        guess: '',\n        answer: 'corgi',\n        gameActive: true,\n        success: false,\n    })\n  }\n\n  endGame = (correct) => {\n    console.log('end game', correct);\n    this.setState({\n      gameActive: false,\n      success: correct\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Welcome to the pic game!\n        </header>\n\n        <ImageGrid gameActive={this.state.gameActive}></ImageGrid>\n        <GameInput \n            startGame={this.startGame} \n            endGame={this.endGame} \n            gameState={this.state}>\n        </GameInput>\n\n        <footer className=\"footer\">\n          Developed by J.A.K. studios\n        </footer>\n      </div>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}